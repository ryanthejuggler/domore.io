// Generated by CoffeeScript 1.6.2
(function() {
  var DatePattern, db,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  db = require('./Db');

  DatePattern = (function() {
    /**
      @field start {Date} the start of this pattern
      @field end {Date} the end of this pattern
      @field type {String} type of pattern
      @field matches {Array} array to match, depends on type
    */
    function DatePattern(config) {
      this.start = config.start, this.end = config.end, this.type = config.type, this.matches = config.matches;
    }

    /**
      @method matchesDate
      Returns whether or not the passed Date matches this pattern.
      @param date {Date}
      @returns {boolean}
    */


    DatePattern.prototype.matchesDate = function(date) {
      var _ref, _ref1;

      date = DatePattern.roundToDate(date);
      switch (this.type) {
        case 'weekly':
          return _ref = date.getUTCDay(), __indexOf.call(this.matches, _ref) >= 0;
        case 'monthly':
          return _ref1 = date.getUTCDate(), __indexOf.call(this.matches, _ref1) >= 0;
        case 'daily':
          return true;
        default:
          return false;
      }
    };

    DatePattern.prototype.getInstancesInRange = function(start, end) {
      var i, out, _i, _j, _ref, _ref1;

      start = DatePattern.roundToDate(start);
      end = DatePattern.roundToDate(end) + 864e5;
      if (+start < +this.start) {
        start = this.start;
      }
      if (+end > +this.end) {
        end = this.end;
      }
      switch (this.type) {
        case 'daily':
          return (function() {
            var _i, _results;

            _results = [];
            for (i = _i = +start; 864e5 > 0 ? _i <= +end : _i >= +end; i = _i += 864e5) {
              _results.push(new Date(i));
            }
            return _results;
          })();
        case 'weekly':
          out = [];
          for (i = _i = +start; 864e5 > 0 ? _i <= +end : _i >= +end; i = _i += 864e5) {
            if (_ref = new Date(i).getUTCDay(), __indexOf.call(this.matches, _ref) >= 0) {
              out.push(new Date(i));
            }
          }
          return out;
        case 'monthly':
          out = [];
          for (i = _j = +start; 864e5 > 0 ? _j <= +end : _j >= +end; i = _j += 864e5) {
            if (_ref1 = new Date(i).getUTCDate(), __indexOf.call(this.matches, _ref1) >= 0) {
              out.push(new Date(i));
            }
          }
          return out;
        default:
          return [];
      }
    };

    DatePattern.prototype.toSerializable = function() {
      return {
        start: this.start,
        end: this.end,
        type: this.type,
        matches: this.matches
      };
    };

    return DatePattern;

  })();

  DatePattern.roundToDate = function(d) {
    return new Date(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate());
  };

  module.exports = DatePattern;

}).call(this);
