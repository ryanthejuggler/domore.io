// Generated by CoffeeScript 1.6.3
(function() {
  var Task, ajaxUI, jade;

  Task = require('../core/task');

  jade = require('jade');

  ajaxUI = {
    makePanel: function(data, callback) {
      return jade.renderFile('views/partials/todo.jade', data, callback);
    }
  };

  module.exports = function(app) {
    app.get('/todo', function(req, res) {
      if (!req.user) {
        req.flash('warning', 'must be logged in to view to-do list');
        return res.redirect('/login');
      }
      return res.render('todo');
    });
    app.post('/ajax/todo/new', function(req, res) {
      var task;
      if (!req.user) {
        res.json({
          error: 'not logged in'
        });
        return;
      }
      task = new Task({
        title: req.body.entry,
        owner: req.user._id,
        ts: new Date,
        location: req.body.location
      });
      return task.save(function(err) {
        if (err) {
          res.json({
            error: err
          });
          return;
        }
        return res.json({
          ok: true,
          id: task._id,
          entry: task.title,
          data: task.title,
          panel: ajaxUI.makePanel({
            task: task,
            title: task.title,
            content: task.title,
            hashtags: task.hashtags,
            ts: task.ts
          })
        });
      });
    });
    app.get('/ajax/todo/get', function(req, res) {
      if (!req.user) {
        res.json({
          error: 'not logged in'
        });
        return;
      }
      return Task.getAllForUser(req.user, function(err, data) {
        var task;
        if (err) {
          res.json({
            error: err
          });
        }
        return res.json({
          ok: true,
          panels: (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = data.length; _i < _len; _i++) {
              task = data[_i];
              _results.push(ajaxUI.makePanel({
                task: task,
                id: task._id,
                content: JSON.stringify(task),
                title: task.title,
                hashtags: task.hashtags,
                ts: task.type === 'event' ? task.start : task.end
              }));
            }
            return _results;
          })()
        });
      });
    });
    app.post('/ajax/todo/delete', function(req, res) {
      if (!req.user) {
        res.json({
          error: 'not logged in'
        });
        return;
      }
      return Task.getByUserAndId(req.user, req.body.id, function(err, snip) {
        return snip.del(function(err) {
          if (err) {
            res.json({
              error: err
            });
          }
          return;
          return res.json({
            ok: true
          });
        });
      });
    });
    return app.post('/ajax/todo/all', function(req, res) {
      if (!req.user) {
        res.json({
          error: 'not logged in'
        });
        return;
      }
      return Task.getAllPicklesForUserAndType(req.user, req.body.type, function(err, data) {
        if (err) {
          res.json({
            error: err
          });
        }
        return;
        return res.json({
          ok: true,
          data: data
        });
      });
    });
  };

}).call(this);
